#!/usr/bin/env/python3
# -*- coding: utf-8 -*-

import pydoc
import random 
from time import sleep
import json

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

class Line(object):         # It starts the program, intro and choose the line of the hexagram

    def intro(self):
        print ("\n")

        print ("╭━━━┳╮╱╭━━━┳╮")
        print ("┃╭━╮┃┃╱┃╭━╮┃┃")
        print ("┃┃╱╰┫┃╭┫┃╱╰┫╰━┳┳━╮╭━━╮")
        print ("┃┃╱╭┫┃┣┫┃╱╭┫╭╮┣┫╭╮┫╭╮┃")
        print ("┃╰━╯┃╰┫┃╰━╯┃┃┃┃┃┃┃┃╰╯┃")
        print ("╰━━━┻━┻┻━━━┻╯╰┻┻╯╰┻━╮┃")
        print ("╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭━╯┃")
        print ("╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╰━━╯")
        print ("\n")
        print('─' * 10)  # U+2500, Box Drawings Light Horizontal

        Line().generateHexagram()

# traditional calculations to generate i-ching from coin flips assign 'heads' the value of 3 and 'tails' the value of two.
    def cointoss(self):
        rand_i = random.randint(0, 1)
        outcomes = [3, 2]
        
        return outcomes[rand_i]

    # Each line's value is the sum of the values generated by the toss of three coins
    def generateLine(self):
        return self.cointoss() + self.cointoss() + self.cointoss()
    
    def locateHexagram(hex):
        intHex = int(hex)

        # Opening JSON file
        f = open('hexagrams.json')
        
        # returns JSON object as a dictionary
        data = json.load(f)

        found = {}


        for d in data['hexagrams']:
            if d['pattern'] == intHex:
                found = d

        # Closing file
        f.close()

        return found

    def logFormat(type):
        result = Line.locateHexagram(type)
        print("   ", result['symbol'], "   ")
        print(color.BOLD + result['name']['en'] + color.END)
        print(result['name']['zh'])
        print(result['image'])
        print("Judgement:")
        print(result['judgment'])
        print ("\n")

    # Lines with a value of 6 or 9 are considered "changing" and as a result, a second hexagram is generated
    def convertHexagrams(hexagram):
        changing = False
        primary = ""
        relating = ""
        for i in range(len(hexagram)):
            if hexagram[i] == "6":
                changing = True
                primary += str(8)
                relating += str(7)
            elif hexagram[i] == "9":
                changing = True
                primary += str(7)
                relating += str(8)
            else:
                primary += hexagram[i]
                relating += hexagram[i]
        if changing:
            Line.logFormat(primary)
            Line.logFormat(relating)
        else:
            Line.logFormat(primary)


    # * Each hexagram is composed of 6 lines
    def generateHexagram(self):
        hexagram = ""
        for x in range(6):
            hexagram += str(self.generateLine())
        Line.convertHexagrams(hexagram)


    def exa(self):
        print ("Here the exagram from I-Ching: ")
        print ("\n")
        print ("Legend:")
        print ("young yin line   ■■ ■■")
        print ("young yang line  ■■■■■")
        print ("old yin line     ■■x■■")
        print ("old yang line    ■■o■■")
        sleep(1)            # it adds some waiting time, suspence.

Line().intro()