#!/usr/bin/env/python3
# -*- coding: utf-8 -*-

import pydoc
import random 
from time import sleep
import json
import os

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

class Line(object):         # It starts the program, intro and choose the line of the hexagram

    def intro(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        print ("╭━━━┳╮╱╭━━━┳╮")
        print ("┃╭━╮┃┃╱┃╭━╮┃┃")
        print ("┃┃╱╰┫┃╭┫┃╱╰┫╰━┳┳━╮╭━━╮")
        print ("┃┃╱╭┫┃┣┫┃╱╭┫╭╮┣┫╭╮┫╭╮┃")
        print ("┃╰━╯┃╰┫┃╰━╯┃┃┃┃┃┃┃┃╰╯┃")
        print ("╰━━━┻━┻┻━━━┻╯╰┻┻╯╰┻━╮┃")
        print ("╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╭━╯┃")
        print ("╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╱╰━━╯")
        print('─' * 20)  # U+2500, Box Drawings Light Horizontal

        Line().generateHexagram()

    # I calcoli tradizionali per generare i-ching dal lancio di una moneta 
    # assegnano a "testa" il valore di 3 e a "croce" il valore di due.
    def cointoss(self):
        rand_i = random.randint(0, 1)
        outcomes = [3, 2]
        
        return outcomes[rand_i]

    # Each line's value is the sum of the values generated by the toss of three coins
    def generateLine(self):
        return self.cointoss() + self.cointoss() + self.cointoss()
    
    def locateHexagram(hex):
        intHex = int(hex)

        # Opening JSON file
        f = open('hexagrams.json')
        
        # returns JSON object as a dictionary
        data = json.load(f)

        found = {}

        for d in data['hexagrams']:
            if d['pattern'] == intHex:
                found = d

        # Closing file
        f.close()

        return found

    def logFormat(type):
        result = Line.locateHexagram(type)
        print("   ", result['name']['zh'], "   ")
        print(color.BOLD,"Enneagramma",result['number'],": ",result['name']['it'],color.END)
        print("   ", result['symbol'], "   ")
        print(color.UNDERLINE + "La sentenza:" + color.END)
        print(result['judgment'])
        print(color.UNDERLINE + "Immagine:" + color.END)
        print(result['image'])
        print ("\n")

    # Le linee con valore 6 o 9 sono considerate "mutevoli" e di conseguenza
    # viene generato un secondo esagramma.
    # TODO: variabile (array di interi) per segnare quali linee sono mutevoli
    # così da mostrare direttamente il responso mutevole.
    def convertHexagrams(hexagram):
        changing = False
        primary = ""
        relating = ""
        for i in range(len(hexagram)):
            if hexagram[i] == "6":
                changing = True
                primary += str(8)
                relating += str(7)
            elif hexagram[i] == "9":
                changing = True
                primary += str(7)
                relating += str(8)
            else:
                primary += hexagram[i]
                relating += hexagram[i]
        if changing:
            Line.logFormat(primary)
            Line.logFormat(relating)
        else:
            Line.logFormat(primary)


    # * Each hexagram is composed of 6 lines
    def generateHexagram(self):
        hexagram = ""
        for x in range(6):
            hexagram += str(self.generateLine())
        Line.convertHexagrams(hexagram)



Line().intro()