# -*- coding: utf-8 -*-
# Generated by CodiumAI
from cliching import Line
from cliching import Color


import unittest

"""
Code Analysis

Main functionalities:
The Line class is responsible for generating and converting hexagram lines. It prompts the user to toss coins six times and generates a hexagram based on the resulting lines. It then converts the hexagram to its changing and relating hexagrams, if applicable, and prints out the hexagram information for the given hexagram pattern.

Methods:
- intro(): clears the terminal and generates a hexagram
- cointoss(): tosses a coin and returns a result
- generate_line(): prompts the user to press Enter and then generates a line
- load_hexagrams(): loads the hexagrams in a class attribute
- locate_hexagram(hex_pattern): locates the hexagram with the given pattern
- log_format(hex_type, transforming_lines): prints out the hexagram information for the given hexagram pattern
- convert_hexagrams(hexagram): converts a hexagram to its changing and relating hexagrams, if applicable

Fields:
- BOLD, UNDERLINE, END: terminal color codes
- _hexagrams: class attribute that stores the loaded hexagrams from the hexagrams.json file
"""

class TestLine(unittest.TestCase):
    # Tests that a hexagram with no changing lines is generated correctly.
    def test_generate_hexagram_no_changing_lines(self):
        with unittest.mock.patch('builtins.input', return_value=''):
            with unittest.mock.patch('random.choice', return_value=2):
                with unittest.mock.patch('builtins.print') as mock_print:
                    Line.generate_hexagram()
                    mock_print.assert_called_with('\n   ䷀   \n' + Color.BOLD + 'Esagramma 1: Il Creativo' + Color.END + '\n   ䷀   \n' + Color.UNDERLINE + 'La Sentenza:' + Color.END + '\nLa forza creativa sublime ha successo. La perseveranza porta all\'esito. Non si deve compiere nulla di grande. Si deve soltanto essere costanti e corretti. Potenza di penetrazione della luce divina. Buona fortuna. Propizia è l\'attraversata della grande acqua.' + '\n' + Color.UNDERLINE + 'Immagine:' + Color.END + '\nIl cielo si muove sopra il cielo. Il creativo agisce. Così il principe regge il suo ufficio; egli può dare ordini e fare leggi.' + '\n\n')

    # Tests that a hexagram with changing lines is generated correctly.
    def test_generate_hexagram_changing_lines(self):
        with unittest.mock.patch('builtins.input', return_value=''):
            with unittest.mock.patch('random.choice', side_effect=[3, 2, 3, 2, 3, 2]):
                with unittest.mock.patch('builtins.print') as mock_print:
                    Line.generate_hexagram()
                    mock_print.assert_any_call('\n   ䷀   \n' + Color.BOLD + 'Esagramma 1: Il Creativo' + Color.END + '\n   ䷀   \n' + Color.UNDERLINE + 'La Sentenza:' + Color.END + '\nLa forza creativa sublime ha successo. La perseveranza porta all\'esito. Non si deve compiere nulla di grande. Si deve soltanto essere costanti e corretti. Potenza di penetrazione della luce divina. Buona fortuna. Propizia è l\'attraversata della grande acqua.' + '\n' + Color.UNDERLINE + 'Immagine:' + Color.END + '\nIl cielo si muove sopra il cielo. Il creativo agisce. Così il principe regge il suo ufficio; egli può dare ordini e fare leggi.' + '\n\n')
                    mock_print.assert_any_call('\n   ䷁   \n' + Color.BOLD + 'Esagramma 2: La Quiete' + Color.END + '\n   ䷁   \n' + Color.UNDERLINE + 'La Sentenza:' + Color.END + '\nLa quiete. La creazione si compie. Il mondo è in ordine. All\'inizio di tutto, la grande immagine ha successo. Buona fortuna.' + '\n' + Color.UNDERLINE + 'Immagine:' + Color.END + '\nIl vento soffia sopra la terra: l\'immagine della Quiete. Così i grandi reflettono e consultano i loro cuori per prendere decisioni importanti durante i momenti di quiete.' + '\n\n')

    # Tests that loading hexagrams from an empty JSON file raises an error and sets the hexagrams attribute to an empty dictionary.
    def test_load_hexagrams_empty_file(self):
        with unittest.mock.patch('builtins.open', unittest.mock.mock_open(read_data='')) as mock_file:
            Line.load_hexagrams()
            mock_file.assert_called_once_with('hexagrams.json')
            self.assertEqual(Line._hexagrams, {})